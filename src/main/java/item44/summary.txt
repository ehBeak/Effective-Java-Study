API를 작성하는 방식
기존: 템플릿 메서드 패턴
현재: 함수 객체를 받는 정적 팩터리나 생성자 제공 —> 함수형 매개변수 타입을 올바르게 선택하자

다양한 용도의 함수형 인터페이스 제공

기본 함수형 인터페이스 사용 시 주의사항
-> 기본 함수형 인터페이스에 박싱된 기본 타입을 넣어 사용하지 말자
-> 서로 다른 함수형 인터페이스를 같은 위치의 인수로 받는 메서드들을 다중 정의해서는 안된다. (클라이언트에게 모호함 알림)

함수형 인터페이스 대신 직접 작성해야 하는 경우
위의 하나를 만족한다면 전용 함수형 인터페이스를 구현해야 하는 건 아닌지 고민하자. Ex. Comparator
1. 자주 쓰이며, 이름 자체가 용도를 명확히 설명
2. 반드시 따라야 하는 규약이 있다.
3. 유용한 디폴트 메서드를 제공할 수 있다.

직접 만든 함수형 인터페이스에는 @FunctionalInterface 를 사용
1. 해당 클래스의 코드나 설명 문서를 읽을 이에게 람다용으로 설계된 것임을 앙ㄹ려준다.
2. 인터페이스가 하나의 추상 메서드 만을 담고 있어야 컴파일 되게 해 준다.
3. 유지 보수 과정에서 누군가가 실수로 메서드를 추가하지 못하게 막아준다.
